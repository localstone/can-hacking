#include <SPI.h>
#include <mcp_can.h>
#include <Wire.h>
#include <U8g2lib.h>

// Pin-Definitionen
#define CS_PIN     5
#define TOUCH_PIN 33
#define SDA_PIN   32
#define SCL_PIN   25

// Hardware-I2C Display (SH1106/SSD1306)
U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(
  U8G2_R0, /* reset=*/ U8X8_PIN_NONE
);

// Seitenübersicht
enum Page { OVERVIEW, SPEED, OIL_TEMP, FUEL_LEVEL, COOLANT_TEMP, GEAR, RPM, CONSUMPTION };
Page currentPage = OVERVIEW;

// Letzte Werte
String lastValue[8] = { "--", "--", "--", "--", "-", "--", "--", "--" };

// Titel und Einheiten für Einzelseiten
const char* titles[8] = { "Overview", "Speed", "Oil Temp", "Fuel Level", "Coolant Temp", "Gear", "RPM", "Consumption" };
const char* units[8]  = { "", "km/h", "C", "L", "C", "", "rpm", "L/h" };

MCP_CAN CAN(CS_PIN);

// Zeit-Tracking für Speed-Update
unsigned long lastDrawTime = 0;
const unsigned long speedUpdateInterval = 200; // 200 ms

// Funktionsdeklarationen
void drawFullPage();
void updateValue(Page p, const String &v);
void handleCAN(uint32_t id, uint8_t len, uint8_t *b);
String gearToStr(uint8_t g);

void setup() {
  Serial.begin(115200);
  Wire.begin(SDA_PIN, SCL_PIN);
  Wire.setClock(400000);
  u8g2.begin();
  pinMode(TOUCH_PIN, INPUT);

  SPI.begin();
  if (CAN.begin(MCP_ANY, CAN_500KBPS, MCP_8MHZ) != CAN_OK) {
    Serial.println("MCP FAIL");
    while (1);
  }
  CAN.setMode(MCP_NORMAL);

  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_ncenB14_tr);
  u8g2.drawStr(0, 30, "Start");
  u8g2.sendBuffer();
  delay(800);

  drawFullPage();
}

void loop() {
  if (digitalRead(TOUCH_PIN) == HIGH) {
    currentPage = Page((currentPage + 1) % 8);
    drawFullPage();
    delay(200);
  }
  if (CAN.checkReceive() == CAN_MSGAVAIL) {
    uint32_t id;
    uint8_t len, buf[8];
    CAN.readMsgBuf(&id, &len, buf);
    handleCAN(id, len, buf);
  }
}

void drawFullPage() {
  u8g2.clearBuffer();

  if (currentPage == OVERVIEW) {
    u8g2.setFont(u8g2_font_6x12_tr);
    u8g2.drawStr(0, 11, "Cool");
    u8g2.setFont(u8g2_font_fub17_tr);
    u8g2.drawStr(0, 31, lastValue[COOLANT_TEMP].c_str());

    u8g2.setFont(u8g2_font_6x12_tr);
    u8g2.drawStr(85, 11, "Oil");
    u8g2.setFont(u8g2_font_fub17_tr);
    u8g2.drawStr(85, 31, lastValue[OIL_TEMP].c_str());

    u8g2.setFont(u8g2_font_fub30_tr);
    String g = lastValue[GEAR];
    int gw = u8g2.getStrWidth(g.c_str());
    u8g2.drawStr((128 - gw) / 2, 33, g.c_str());

    u8g2.setFont(u8g2_font_fub17_tr);
    String fuel = lastValue[FUEL_LEVEL] + "L";
    u8g2.drawStr(0, 62, fuel.c_str());

    u8g2.setFont(u8g2_font_fub17_tr);
    String s = lastValue[SPEED];
    int sw = u8g2.getStrWidth(s.c_str());
    u8g2.drawStr(80, 62, s.c_str());
  }
  else {
    u8g2.setFont(u8g2_font_6x12_tr);
    u8g2.drawStr(0, 12, titles[currentPage]);
    u8g2.setFont(u8g2_font_fub30_tr);
    u8g2.drawStr(0, 52, lastValue[currentPage].c_str());
    if (*units[currentPage]) {
      u8g2.setFont(u8g2_font_6x12_tr);
      u8g2.drawStr(0, 60, units[currentPage]);
    }
  }

  u8g2.sendBuffer();
}

void updateValue(Page p, const String &v) {
  unsigned long now = millis();
  bool valueChanged = (v != lastValue[p]);
  bool forceSpeedUpdate = (p == SPEED && now - lastDrawTime >= speedUpdateInterval);

  if ((valueChanged || forceSpeedUpdate) && (p == currentPage || currentPage == OVERVIEW)) {
    if (valueChanged) lastValue[p] = v;
    drawFullPage();
    lastDrawTime = now;
  }
}

void handleCAN(uint32_t id, uint8_t len, uint8_t *b) {
  switch(id) {
    case 0x200:
      if (len >= 4) {
        uint16_t rawSpeed = (b[2] << 8) | b[3];
        int kmh = rawSpeed / 18;
        updateValue(SPEED, String(kmh));
      }
      break;

    case 0x308:
      if (len >= 8) updateValue(OIL_TEMP, String(b[5] - 40));
      break;

    case 0x408:
      if (len >= 1) {
        float fl = b[0] * 0.5;
        String v = String(fl, 1);
        updateValue(FUEL_LEVEL, v);
      }
      break;

    case 0x608:
      if (len >= 1) updateValue(COOLANT_TEMP, String(b[0] - 40));
      if (len >= 8) updateValue(CONSUMPTION, String(((b[5] << 8) | b[6]) / 100.0, 2));
      break;

    case 0x418:
      if (len >= 1) updateValue(GEAR, gearToStr(b[0]));
      break;

    case 0x212:
      if (len >= 4) updateValue(RPM, String((b[2] << 8) | b[3]));
      break;
  }
}

String gearToStr(uint8_t g) {
  switch(g) {
    case 0x35: case 0x05: return "5";
    case 0x34: case 0x04: return "4";
    case 0x33: case 0x03: return "3";
    case 0x32: case 0x02: return "2";
    case 0x31: case 0x01: return "1";
    case 0x4E: return "N";
    case 0x52: return "R";
    default:    return "-";
  }
}
